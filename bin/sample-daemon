#!/usr/bin/env ruby
lib = File.expand_path '../../lib', __FILE__
$LOAD_PATH.unshift lib unless $LOAD_PATH.include? lib

require 'elasticsearch'
require 'mongo'
require 'newrelic_rpm'
require 'pry-byebug' if 'production' != ENV['DAEMON_ENV']
require 'sneakers'
require 'sneakers/handlers/maxretry'
require 'sneakers/metrics/newrelic_metrics'
require 'sneakers/runner'
require 'realself/graph/follow'
require 'realself/stream'
require 'realself/daemon'

require 'fanout_handler'
require 'test_ack_handler'
require 'test_reject_handler'
require 'test_requeue_handler'
require 'test_enclosure'


# collect configuration parameters
activity_exchange         = ENV.fetch('ACTIVITY_EXCHANGE', 'activity-exchange')
activity_queue            = ENV.fetch('ACTIVITY_QUEUE', 'sample-daemon.activity')
debug_mode                = 'production' != ENV['DAEMON_ENV']
elasticsearch_url         = URI(ENV.fetch('ELASTICSEARCH_URL', 'http://localhost:9200'))
max_retry_count           = 3 # retries on error
metrics_provider          = Sneakers::Metrics::NewrelicMetrics.new if ENV['NEW_RELIC_LICENSE_KEY']
mongodb_dbname            = 'sample-service'
mongodb_host              = ENV.fetch('MONGODB_HOST', 'localhost:27017')
rmq_url                   = URI(ENV.fetch('RABBITMQ_URL', 'amqp://guest:guest@rabbit.realselfcorp.com:5672'))
stream_activity_exchange  = ENV.fetch('STREAM_ACTIVITY_EXCHANGE', 'stream-activity-exchange')
stream_activity_queue     = ENV.fetch('STREAM_ACTIVITY_QUEUE', 'sample-daemon.stream-activity')
worker_count              = 'production' != ENV['DAEMON_ENV'] ? 1 : 10


Sneakers.configure({
  :ack           => true,
  :amqp          => rmq_url.to_s,
  :daemonize     => false, # do not enable this!  it's incompatible with upstart
  :durable       => true,
  :env           => ENV.fetch('DAEMON_ENV','development'),
  :exchange_type => 'topic',
  :handler       => Sneakers::Handlers::Maxretry,
  :heartbeat     => 60,
  :log           => ENV.fetch('DAEMON_LOG', STDOUT),
  :metrics       => metrics_provider,
  :prefetch      => 1,
  :retry_max_times  => max_retry_count,
  :retry_timeout    => 10000, # msec
  :threads       => 1, # don't use > 1 - use more workers instead
  :workers       => worker_count
})


# configure loggers
Sneakers::logger.level = debug_mode ? Logger::DEBUG : Logger::INFO
RealSelf::logger = Sneakers::logger


# report startup configuration
RealSelf::logger.info("Staring daemon with environment:   #{ENV.fetch('DAEMON_ENV','development')}")
RealSelf::logger.info("ACTIVITY_EXCHANGE:                 #{activity_exchange}")
RealSelf::logger.info("ACTIVITY_QUEUE:                    #{activity_queue}")
RealSelf::logger.info("ELASTICSEARCH_URL:                 #{elasticsearch_url.to_s}")
RealSelf::logger.info("RABBITMQ_URL:                      #{rmq_url.to_s}")
RealSelf::logger.info("MAX_RETRY_COUNT:                   #{max_retry_count}")
RealSelf::logger.info("MONGO_DATABASE:                    #{mongodb_dbname}")
RealSelf::logger.info("MONGODB_HOST:                      #{mongodb_host}")
RealSelf::logger.info("STREAM_ACTIVITY_EXCHANGE:          #{stream_activity_exchange}")
RealSelf::logger.info("STREAM_ACTIVITY_QUEUE:             #{stream_activity_queue}")
RealSelf::logger.info("WORKER_COUNT:                      #{worker_count}")


# configure mongodb client
mongo_client = Mongo::Client.new([mongodb_host],
                                 :database => mongodb_dbname,
                                 :min_pool_size => worker_count,
                                 :max_pool_size => worker_count * 2,
                                 :server_selection_timeout => 5.0)
mongo_db      = mongo_client.database

# configure elasticsearch client
elasticsearch_client =  Elasticsearch::Client.new hosts: [{
                          host: elasticsearch_url.host,
                          port: elasticsearch_url.port
                        }]

# configure workers for Activity messages
RealSelf::Daemon::ActivityWorker.configure({
  :enable_retry     => true,
  :enclosure        => TestEnclosure,
  :exchange_name    => activity_exchange,
  :handler_params   => {
    :mongo_db   => mongo_db,
    :publisher  => RealSelf::Stream::Publisher.new(
      {
        :heartbeat  => 60,
        :host       => rmq_url.host,
        :password   => rmq_url.password,
        :port       => rmq_url.port,
        :user       => rmq_url.user,
        :vhost      => '/'
      },
      stream_activity_exchange)
  },
  :queue_name       => activity_queue
})



# configure workers for StreamActivity messages
RealSelf::Daemon::StreamActivityWorker.configure({
  :enable_retry     => true,
  :enclosure        => TestEnclosure,
  :exchange_name    => stream_activity_exchange,
  :queue_name       => stream_activity_queue,
  :handler_params   => {
    :debug_mode => debug_mode,
    :mongo_db   => mongo_db
  }
})


# set up NewRelic monitoring
if ENV['NEW_RELIC_LICENSE_KEY']
  metrics_provider.eagent ::NewRelic
  RealSelf::Daemon::ActivityWorker.include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation
  RealSelf::Daemon::ActivityWorker.add_transaction_tracer :work_with_params, name: 'MetricsWorker', params: 'args[0]'
else
  RealSelf::logger.warn("NewRelic license key not found.  Monitoring disabled.")
end


# find all worker classes
WORKERS = []
ObjectSpace.each_object Class do |c|
  WORKERS << c if c.ancestors.include?(Sneakers::Worker) && c.configured
end


# start the daemon
Sneakers::Runner.new(WORKERS).run
